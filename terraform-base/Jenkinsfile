#!/bin/groovy

pipeline {
    agent any

    // tools {
    //     go "Go 1.18.1"
    // }

    parameters {
        booleanParam(
            name: 'OnlyTest',
            description: 'Tests the deployment and destroys it afterwards',
            defaultValue: false
        )
    }

    environment {
        AWS = credentials('AWS-Key')
        AWS_REGION = credentials('AWS-Region')
        SECRET_URL = credentials('Terraform-Secrets')

        def aws_script = "aws secretsmanager get-secret-value --secret-id $SECRET_URL --region $AWS_REGION"
        def output = sh(returnStdout: true, script: aws_script)
        def aws_secrets = readJSON(text: readJSON(text: output).SecretString)

        TF_VAR_vpc_cidr = aws_secrets["vpc_cidr"].toString()
        TF_VAR_availability_zone = aws_secrets["availability_zones"].toString()

        TF_VAR_public_subnet = aws_secrets["public_subnets"].toString()
        TF_VAR_private_subnet = aws_secrets["private_subnets"].toString()

        TF_VAR_nat_ip = aws_secrets["nat_ip"].toString()

        TF_VAR_route53_zone_id = aws_secrets["route53_zone_id"].toString()
        TF_VAR_aws_user_id = aws_secrets["aws_user_id"].toString()

        TF_VAR_ecs_record = aws_secrets["ecs_url"].toString()
        TF_VAR_eks_record = aws_secrets["eks_url"].toString()

        TF_VAR_resource_secret_name = aws_secrets["resource_secret_name"].toString()
    }

    stages {
        stage('GitHub Fetch') { steps{
            echo(message: 'GitHub Fetch!')
            git(branch: 'dev', url: 'https://github.com/Heads-in-the-Cloud/devops-AP.git')
        }}

        stage("TF Lint") { steps{
            echo(message: 'Running TFLint verification:')
            dir("./terraform-base") {
                sh(script: 'tflint --init --config=tflint.hcl')
                sh(script: 'tflint --config=tflint.hcl')
            }
        }}

        stage("TerraTest") { when { expression { params.OnlyTest }}
            steps{
            echo(message: 'Running Terratest!')
            dir("./terraform-base/terratest") {
                sh(script: 'echo $LANG')

                // sh(script: 'rm go.mod', returnStatus: true)
                // sh(script: 'go clean --modcache')

                // sh(script: 'go mod init terratest')
                // sh(script: 'go mod tidy -v')

                // sh(script: 'go test -v -run TestTerraform -timeout 30m')
            }
        }}

        stage('Terraform Plan') { steps{
            echo(message: 'Terraform Plan!')
            dir("./terraform-base") {
                sh(script: "terraform init -no-color")
                sh(script: "terraform plan -no-color -out ../plan.tf")
            }
        }}

        stage('Terraform Apply') { when { expression { !params.OnlyTest }}
            steps{
            echo(message: 'Terraform Apply!')
            dir("./terraform-base") {
                sh(script: 'terraform apply -no-color -auto-approve ../plan.tf')
            }
        }}
    }
    post { always {
        echo(message: 'Wow!')
    }}
}