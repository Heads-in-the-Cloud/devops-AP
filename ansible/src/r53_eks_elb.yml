---
- hosts: localhost
  connection: local
  environment:
    AWS_REGION: "{{ aws_secret_region }}"
  tasks:
    - route53:
        state: get
        zone: "{{ aws_route53_zone }}"
        record: "{{ elb_url }}"
        type: CNAME
      register: r53_info
    # - elb_application_lb_info:
    #   register: elb_info
    # - debug:
    #     msg: "{% for elb in elb_info.load_balancers %}\
    #         {% if elb.tags['kubernetes.io/cluster/ap-eks-cluster'] is defined %}\
    #           {{ elb.dns_name }}\
    #         {% endif %}\
    #       {% endfor %}"
    #   register: eks_elb_dns
    - shell: |
        #!/usr/bin/env bash
        set -euo pipefail

        LB_ARN="$(aws elbv2 describe-load-balancers --region us-east-2 | jq .LoadBalancers | jq .[]?.LoadBalancerArn | jq -r)"

        for i in $LB_ARN; do
          TAGS="$(aws elbv2 describe-tags --resource-arns $i --region us-east-2 | jq .TagDescriptions[].Tags[].Key | jq -r)"

          for j in $TAGS; do
            if [ "$j" == "Name" ]; then
              echo -n "$i"
              exit 0
            fi
          done
        done
        exit 1
      register: eks_elb_dns
      until: eks_elb_dns != ""
    - debug: { msg: "r53 is not set to the correct value! It's set to: {{r53_info.set.value}}" }
      when: r53_info.set.value != eks_elb_dns.msg
    - route53:
        state: present
        zone: "{{ aws_route53_zone }}"
        record: "{{ elb_url }}"
        type: CNAME
        value: "{{ eks_elb_dns.msg }}"
        overwrite: true
      when: r53_info.set.value != eks_elb_dns.msg